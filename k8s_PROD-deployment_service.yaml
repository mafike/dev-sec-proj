apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: devsecops
  name: devsecops
spec:
  replicas: 2
  selector:
    matchLabels:
      app: devsecops
  template:
    metadata:
      annotations:
        vault.hashicorp.com/agent-init-first: "true"
        traffic.sidecar.istio.io/excludeInboundPorts: "8200"
        traffic.sidecar.istio.io/excludeOutboundIPRanges: "10.108.127.59/32"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/tls-skip-verify: "true"
        vault.hashicorp.com/role: "devsecops-role"
        vault.hashicorp.com/agent-inject-secret-db-credentials: "database/creds/devsecops-role"
        vault.hashicorp.com/agent-inject-template-db-credentials: |
          {{- with secret "database/creds/devsecops-role" -}}
          export DB_USERNAME={{ .Data.username }}
          export DB_PASSWORD={{ .Data.password }}
          {{- end }}
      labels:
        app: devsecops
    spec:
      serviceAccountName: issuer
      initContainers:
      - name: db-check
        image: busybox:1.34
        command:
        - sh
        - -c
        - |
          until nc -zv mysql-service 3306; do
            echo "Waiting for database to be ready...";
            sleep 2;
          done;

      containers:
      - name: devsecops-container
        image: replace
        imagePullPolicy: IfNotPresent
        securityContext:
          capabilities:
            drop:
             - NET_RAW
          runAsNonRoot: true
          runAsUser: 100
          readOnlyRootFilesystem: true
        command: ["/bin/sh", "-c"]
        args:
          - . /vault/secrets/db-credentials && java -jar /home/k8s-pipeline/app.jar
        resources:
         requests:
          memory: "256Mi"
          cpu: "200m"
         limits:
          memory: "512Mi"
          cpu: "500m"
        
        volumeMounts:
        - name: mysql-data
          mountPath: /data
        - mountPath: /tmp
          name: vol
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: type
                operator: In
                values:
                - "ondemand"
                
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-pv-claim
      - name: vol
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: devsecops
  name: devsecops-svc
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: devsecops
  type: ClusterIP
---

apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: devsecops-gateway
  namespace: prod
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: devsecops-numeric
  namespace: prod
spec:
  hosts:
  - "*"
  gateways:
  - devsecops-gateway
  http:
  - match:
    - uri:
        prefix: /api/contact
    - uri:
        prefix: /increment
    - uri:
        exact: /
    route:
    - destination:
        host: devsecops-svc
        port:
          number: 8080
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-istio-ingress
  namespace: prod
spec:
  podSelector:
    matchLabels:
      app: devsecops
  ingress:
  - from:
    - podSelector:
        matchLabels:
          istio: ingressgateway
